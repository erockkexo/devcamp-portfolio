
---------------------------------------------------


AUTHENTICATION

---------------------------------------------------

Devise install: 
	rails generate devise:install

Initializers is for setting up custom settings with devise
locals is for different languages like spanish or mandarin 

in devise.rb
	lets you set length and stuff. 

change the mailer_sender attribute
	support@devcamp.com as an example 

To setup we need to define a default URL in our environment files:

       config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }

       Host should say your site.com when you put it in production

Set root which we have already done in the routes file


Next is to setup flash message in the application HTML layout

Then we setup a generator to create the view files for devise sop we can see it. 
	rails g devise:views in cli

Registrations is like creating an account or password creation, 
Sessions is when you are loggin into the application 


Next we have to use devise for what ever model we want to secure. This time we created one for 
User:
	rails generate devise User

	This updates the route table and creates a user model file --> Models: user.rb

	In User.rb there are a lot of customizable functions like confirmable which means you have to 
	receive a valid email reponse in order to create an account. This like shits on robots. 



IF we wanted to add custom fields. 

In the devise_create_users.rb file there is a database migration, 
we are going to add a custom firstname and last name for better user experience. 

	##Custom Fields 
	t.string :name

	Then we migrated the database: rails db:migrate

IMPORTANT**** make sure to restart the server when reconfiguring the routes table. 


Now we are going to update the routes because it doesn't look very professional right now

so in routes, we can update the devise_for method to take on some customization: 

	devise_for :users, path: "", path_names: { sign_in: 'login', sign_out: 'log_out', sign_up: 'register' }



We still don't have the logout functionality

We are just going to put a logout button on our layouts file so that later we can update that and make it easy for everyone to use 

	In rake routes file we find the logout page. We see that destroy_user_session is tied to the logout function. 

		destroy_user_session DELETE /

	 	log_out(.:format)                                                                   

	in the application.html.erb file we add: 
	<%= link_to "Logout", destroy_user_session_path, method: :destory %>


	This gives us the ability to logout, but it doesn't change pages or status just yet. We have to find out if a user is already logged in. 

		Stilll in the application.html.erb file:

		<%= link_to "Log in", new_user_session_path %> (found from rake routes login)
		<%= link_to "Sign up", new_user_registration_path %>



We want our customers to be able to have a custom name. Remember in our migration we created the t.string => "name" field, but it hasnt carried over to the form just yet. 

	In views, devise, registration. 

	we can just copy and paste the fields, while changing some :email to :name, and email_field to text_field :

	This is the new file
  <div class="field">
    <%= f.label :name %><br />
    <%= f.text_field :name %>
  </div>


	And this is the edit file
	<div class="field">
    	<%= f.label :name %><br />
    	<%= f.text_field :name %>
  	</div> 


This lets us get the name from the custmer. But it doesnt capture the name just yet. If you remember, the controller doesn't permit the name params. 

Industry best practice is called single responsibility rule - 
A class should have a single responsibility. If you have to use the word AND to describe it it should be split up. 


We are going to create a new concern in controllers; 

Module as being modular and can be spread around 
Classes are for single contollers. 

We are going to create another module called DeviseWhiteList in the file devise_whitelist.rb

We must call it DeviseWhitelist because rails has a parsing rule that turns 
	DeviseWhitelist => devise_whitelist
This way the application can find it 

we start by instantiating it: 
	module DeviseWhitelist

	extend ActiveSupport::Concern 
		This brings in the methods from the ACtive SUpport Concern module



Now lets say we wanted to add something like "Hey Eric", if we look at our schema file we see there is no entry to collect that information.

First we go to the user model => user.rb and we are going to create some new methods. These methods split the customer defined name into first name and last name. We are also going to make sure the user has to include their first and last name so that they don't miss it by accident and shit goes wrong:


	validates_presence_of :name

	def first_name
		self.name.split.first
	end

	def last_name
		self.name.split.last
	end 

And with this lines of code we can update the views page to call the first_name and last_name methods and display them to the world!

	<%= current_user.first_name if current_user %>

Now we use the if statement because first_name is a method and if there is no user signed in it will disrupt the entire procedure. 

The coolest part about this whole procedure is that if we create the methods within the models our entire system can all them when ever it wants. 

Devise gives us the current_user method. 

Current_user method checks to see if there is a user logged in. If they are logged it, it parses a direct connection to the database under the name entry. 




---------------------------------------------------

Controllers 


---------------------------------------------------



In this section we started with looking at the Routes folder: 

As a reminder:

	get 'portfolio/:id', to: 'portfolio#show', as: 'portfolio_show'

	This a specific route that takes in an ID paramater and is mapped to the show action 

	because it catches this route: portfolio/:id, it knows to map it to the show action: portfolios#show


In the show.html.erb page: 
params is a hash data structure that allows us to keep key value pairs 

By typing in the html form: 
	<%= params.inspect %>

	it renders the available data that we can use ot do some pretty nifty things. 

	In this case we have the 	controller => portfolios, 
								action => show
								id => 4
	
	you can isolate the parameters by 
		params[:id]

	And by isolating the paramaters you can dynamically change the page based on the controller accessing the page. 


	When the router got the request via the URL: 
		portfolio/4

	the server mapped it because the portfolio/:id is looking for an ID. 




	When you type in 

		localhost:3000/portfolio/4

	the server queries the routes.rb file and looks for a similar pattern. It finds it in 

		get 'portfolio/:id'	which is mapped to the action portfolio#show. 	

	its going to grab the /4 portion and store that in a hash key value pair id => 4
	from that point the controller takes over. By being mapped to the portfolio#show method, it
	calls the show method and sends the id paramater to this method: 


	def show
		@portfolio_item = Portfolio.find(params[:id])
	end


	it basically says okay i have the paramater id => 4, so I am going to run a database query on the portfolio database and store those results in
	the @portfolio_item instance variable and that all gets pushed to the views page. so when we call @portfolio_item it appears in embedded ruby for example: 

	<%= @portfolio_item %>




Sessions and Session Tracker


	The ability to create dynamic routes for exmaple different landing pages from different places like linkedin or facebook. OR DIFFERENT ADDS PER PERSON. 

	In Application controller - the parent controller of every system.

	Here we put in a before action and set a new method: 


		before_action :set_source

		def set_source
			session[:source] = params[:q] if params[:q]
		end  

	Note that the :q can be anything we want. IF a paramater exists. 

	Now if we put a question mark ?="string" in the URL that passes along another key value pair to the parameters. 

		localhost:3000/portfolio/4?q=twitter

	Here we see that q = twitter and if we flip back to the Application controller we see that we used teh before_action to call the set_source method which basically takes sets the session[:source] = params[:q] which we set in the URL. And once set we can use it anywhere in the application!

	Now switching to the application layout file ---> application.html.erb

	**********WARNING***********

	Sesion data is super easy to hack. Never put credit card information in it. 


Refactoring the session into a Controller Concern 

	For any page to be a controller it must inherit the attributes from the ApplicationController page. 
	Creating a new page in the concerns page set_source.rb 

	In the set_source.rb file:
		

		module SetSource #remember case is important here 

			extend ActiveSupport::Concern

			included do
				before_action :set_source
			end

			def set_source
				session[:source] = params[:q]
			end
		end


	you will see that we just basically said include a set source method which sets the session source to the q value from the URL. 

	Then in the Application_controller file we just called it by using the include method:

		include SetSource



Strong Parameters

	In the application.rb file under config/locales. This is the root of all of our applicaiton. 



Null Object Pattern


	What happens when a guest (someone who isn't logged in) tries to access our show method. There would probabyl be an error because they aren't l
	logged in, or we could build some work arounds (not a good practice.)
	We will implement the Null Object Pattern to give custom behaviour based on if they are logged in or out, but this won't 
	happen in the view (which is also bad practice.)
	Instead this will be handled on the control side. 

	On the web page we know right away theres a bug: it has as greeting but no name :(

	Looking at the home.html.erb file we see examine the first line which is considered a bad practice / insecure. 
	Current user is only available when someone is signed in. (not good.)
		

		<h1> Hey <%= current_user.first_name if current_user %> </h1>


	Ok we start with the ApplicationController page --> application_controller.rb because it's so easy to implement. We know placement
	isn't a problem. We start with overriding the current_user method, so that using boolean logic there is alway a current user whether it's 
	a actual customer or a guest. :

		def current_user 
			super || 
		end 

	We need to create an account that acts like a user, but is really a guest. We use the openstructure method to create a guest user account. 

		def current_user
			super || OpenStruct.new( name:"Guest", first_name: "Guest", last_name: "X", email: "guest@example.com" )
		end

	But now what we must do is we have to update the application.html.erb views/layout file becuase we started to remove the defensive code. 
	So first we remove the if current_user %> code from the home.html.erb file: 

		<h1> Hey <%= current_user.first_name %> </h1>

	Then we update the application.html.erb file to reflect the options between a super (user) and a OpenSruct user:

		<% if current_user.is_a?(User) %>
	      <%= link_to "Logout", destroy_user_session_path, method: :delete %>
	    <% else %>
	      <%= link_to "Log in", new_user_session_path %>
	      <%= link_to "Sign up", new_user_registration_path %>
	    <% end -%>


    And finally we are going to create a new concern. current_user_concern.rb

		 module CurrentUserConcern

			extend ActiveSupport::Concern


			def current_user
				super || guest_user
			end

			def guest_user
				OpenStruct.new(	name: "Guest", 
								first_name: "Guest", 
								last_name: "X", 
								email: "guest@example.com")
			end

		 end



---------------------------------------------------

Views 


---------------------------------------------------




Working with the master view file 

	Our first goal is to create a dynamically generator html title entry for all of our pages. 
	A quick look at application.html.erb in the layouts file shows us that the the title tags are hard coded: 

		--> application.html.erb:

	    <title>Devcamp Portfolio | My Portfolio Website</title>

    The first step is editing the application controller file, and we are going to add a set_title method: 

    	--> application_controller.rb

		before_action :set_title
		
		def set_title
			@page_title = "Devcamp Portfolio | My Portfolio Website"
		end

	Then going back to the views file: 

		--> application.html.erb:

		 <title> <%= @page_title %> </title>

	 This step gives us a default title, which can be overided by putting a method in the controller file under 
	 any of the actions. For example: 


		--> blogs_controller.rb:

		  def index
    		@blogs = Blog.all
   			@page_title = "Blog"
  		  end


  	We can take this one step further by adding a @blog.title tage to the @page_title instance variable. 
  	Remember because of the before_action at the top of the screen we have access to the @blog instance vairable
  	which is set at the bottom of the page:


		--> blogs_controller.rb:

		  def show
		    @page_title = @blog.title
		  end

	Now we are going to do our usual and set this as a concern by creating the blogs_pagetitle.rb file in the 
	concerns folder.  

		--> blogs_pagetitle.rb


			module BlogsPagetitle

				extend ActiveSupport::Concern


				included do 
					before_action :set_title
				end

				def set_title

					@page_title =  "Devcamp Portfolio | My Portfolio Website"
					@seo_keywords = "Eric's Portfolio"
					
				end		

			end


	Then we update the application_controller.rb file:
		--> application_controller.rb 

			include BlogsPagetitle #remember the name must match up

	Then we can add a meta name tag on our layouts page: 

		--> application.html.erb 

		 <meta name="keywords" content="<%= @seo_keywords %>">


	 Now we are going to create some more links in the html page. 



		<div>
	      <div><%= link_to "Home", root_path %></div>
	      <div><%= link_to "About Me", about_path %></div>
	      <div><%= link_to "Contact", contact_path %></div>
	    </div>


Creating new layout files for seperate pages
	
	Layouts is where we are allowed to put as many layout files as we want. Lets start with creating a HTML layout. 

		--> blog.html.erb

	You will notice there is a styleshgeet link tag that maps from this html page to the css page in style sheets under 
	the assets folder:

		--> application.html.erb

	    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>

    Then in the application.css file we delete everything so that there are no styling conflicts. 
    We also added some styling in the blogs.scss folder. 

    Next step is to declare what layout we want to use and we do that in the controller file. 

    	--> blogs_controller.rb 

    	layout "blog"         #note that this entry must match the name of the layout file created earlier. 

	Finally we must precompile the code by adding it to the assets.rb file:

		--> assets.rb 
		Rails.application.config.assets.precompile += %w( blogs.css )


Partials
	
	Partials are snippets of code that often get repeated across a website. 
	Jordan's preferred method is to create a shared folder in the views folder and put his partials there.

	*** Partials must be named with an underscore as the first character: 
		--> _navbar.html.erb

	    <div>
	      <div><%= link_to "Home", root_path %></div>
	      <div><%= link_to "About Me", about_path %></div>
	      <div><%= link_to "Contact", contact_path %></div>
	      <div><%= link_to "Portfolio", portfolios_path %></div>
	      <div><%= link_to "Blog", blogs_path %></div>
	    </div>

    Now we can replace to the nav content in the application html file. 

    	--> application.html.erb

    	<%= render 'shared/navbar' %>


Sending data between partials 

	Looking at the _form.html page, we see that blog isn't an instance variable so its not being called from the controller.

	Instead what happens is the controller sets the instance variable of @blog = Blog.new which then gets passed to the 
	_form.html.erb file:

		--> blogs_controller.html.erb

			  def new
			    @blog = Blog.new
			  end

		--> new.html.erb
	     		<%= render 'form', blog: @blog %>.  #notice the blog: @blog 

 		--> _form.html.erb 

			  <% if blog.errors.any? %>		#notice the blog.errors.any, the blog variable was passed by the new page. 



    Now lets say we want to style different components of the navbar differently on each page i.e. active page. 
    We can do this by making our sharable file dynamic. In our _nav.html.erb file: 

    	--> _nav.html.erb 

    	<div class= " <%= location %> " >

	The location is a local variable that we can pass in from thhe views pages as an example: 

		--> blog.html.erb

	    <%= render 'shared/nav', location: 'top' %> #notice the location variable

    So now we can refactor our shit. In the portfolios directory: 

    	--> new.html.erb

    		<h1>Create a new post</h1>


			<%= render 'form', portfolio_item: @portfolio_item %>


	And we then create another file called _form.html.erb (which is in the portfolios directory still)
		
		--> _form.html.erb



			<%= form_for(@portfolio_item) do |form| %>

			  <div class="field">
			    <%= form.label :title %>
			    <%= form.text_field :title %>
			  </div>

	    --> new.html.erb     and      edit.html.erb


	
	    	<%= render 'form', portfolio_item: @portfolio_item %>


View Helper method 

	Helper methods are like partials but instead of being html based they are ruby based. 
	We are going to create a helper method called "sample helper"

		--> application_helper.rb

		module ApplicationHelper
			def sample_helper
				"<p>My Helper</p>".html_safe     	#note that because its ruby we must use .html_safe
			end
		end

	Then we can call this method on any one of our views pages using embedded ruby. 

		--> home.html.erb

		<%= sample_helper %>

	lets try to build our own helper method shall we: 

	so we built a user_check method into the applicaiton_helper.rb file that works, but has one caveat: 

		--> application_heler.rb 

		def user_check

	    if current_user.is_a?(User) 
	    	link_to "Logout", destroy_user_session_path, method: :delete 
	    else 
	    	link_to "Log in", new_user_session_path
	    	link_to "Sign up", new_user_registration_path 
	     end 
		end


	But what happens is, is that Ruby will only return the Signup portion because it is the last thing
	that is true. so we must concatanate them: 


	    else 
	    	( link_to "Log in", new_user_session_path ) + "<br>".html_safe +
	    	( link_to "Sign up", new_user_registration_path )
        end 


    When to use a partial vs Helper method 


Content Helper


	Processes that can be used by methods or helper. It's kind of nice because you can pass to it HTML tags as seen below: 


		--> application_helper.rb 


		def sample_helper
			content_tag(:div, "My content", class: "my-class")
		end





































